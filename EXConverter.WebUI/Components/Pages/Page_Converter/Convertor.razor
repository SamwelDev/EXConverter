@page "/"
@using EXConverter.Application.Application_Serv
@using EXConverter.WebUI.Components.Layout
@inject IJSRuntime JS
@inject IConService _service
@rendermode InteractiveServer

<PageTitle>CONFILE | Pakia</PageTitle>

<div class="container mt-4">
    <div class="mixxer-wrapper mx-auto">

        <div id="upload-zone" class="upload-zone">
            <InputFile  OnChange="HandleFile" />

            <div class="upload-content">
                <i class="fas fa-file-excel fa-3x text-success"></i>
                <p class="mt-2">
                    Drag & Drop your Excel file here
                    <small class="swahili-lab">(Buruta na pakia Excel faili hapa)</small><br />
                    or
                    <span class="upload-browse" @onclick="TriggerFileInput">
                        browse <small class="swahili-lab">(Vinjari)</small>
                    </span>
                </p>

                @if (!string.IsNullOrEmpty(_fileName))
                {
                    <p class="file-name mt-1"><strong>Selected File:</strong> @_fileName</p>
                }
                @if (IsLoading)
                {
                    <div class="text-center mt-3">
                        <div class="spinner-border text-success" role="status">
                            <span class="visually-hidden">Document processing...</span>
                        </div>
                        <p class="mt-2">Converting to PDF ......</p>
                    </div>
                }
            </div>
        </div>
      

       
        @if (_pdfBytes != null && !IsLoading)
        {
            <div class="mt-3">
                <a href="@_pdfUrl" download="Converted.pdf" class="btn btn-primary">
                    <i class="fas fa-download"></i> Download PDF
                    <small class="swahili-lab">(Pakua PDF)</small>
                </a>
            </div>
        }
    </div>
</div>

@code {
    private byte[] _pdfBytes;
    private string _pdfUrl = string.Empty;
    private string _fileName = string.Empty;
    private ElementReference fileInput;
    private bool IsLoading = false;

    // Trigger hidden input via JS
    private async Task TriggerFileInput()
    {
        await JS.InvokeVoidAsync("uploadHelper.clickInput", fileInput);
    }

  
    private async Task HandleFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        _fileName = file.Name;
        await ConvertFile(file);
    }

    [JSInvokable]
    public async Task OnDropFile(string base64File, string fileName)
    {
        IsLoading = true;
        _fileName = fileName;
        StateHasChanged();

        try
        {
            byte[] fileBytes = Convert.FromBase64String(base64File);
            using var ms = new MemoryStream(fileBytes);

            _pdfBytes = _service.ConvertExcelToPdf(ms);
            _pdfUrl = $"data:application/pdf;base64,{Convert.ToBase64String(_pdfBytes)}";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ PDF conversion failed: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }

    private async Task ConvertFile(IBrowserFile file)
    {
        IsLoading = true;
        _pdfBytes = null;
        _pdfUrl = string.Empty;
        StateHasChanged();

        try
        {
            // Load the entire file asynchronously into memory
            using var ms = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 10_000_000).CopyToAsync(ms);
            ms.Position = 0; // reset position

            // Pass the MemoryStream to your service
            _pdfBytes = _service.ConvertExcelToPdf(ms);

            if (_pdfBytes != null && _pdfBytes.Length > 0)
            {
                _pdfUrl = $"data:application/pdf;base64,{Convert.ToBase64String(_pdfBytes)}";
            }
            else
            {
                Console.WriteLine("⚠️ PDF generation returned empty result");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ PDF conversion failed: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }


   
}
